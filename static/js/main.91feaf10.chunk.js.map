{"version":3,"sources":["Utilities.js","victory.png","thumbs_up.png","App.js","index.js"],"names":["fingerJoints","thumb","indexFinger","middleFinger","ringFinger","pinky","drawHand","predictions","ctx","length","forEach","prediction","landmarks","j","Object","keys","finger","k","firstJointIndex","secondJointIndex","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","i","x","y","arc","Math","PI","fillStyle","fill","App","webcamRef","useRef","canvasRef","useState","emoji","setEmoji","images","thumbs_up","victory","runHandPose","a","handpose","net","console","log","setInterval","detect","current","video","readyState","videoWidth","videoHeight","width","height","estimateHands","hand","GE","fp","VictoryGesture","ThumbsUpGesture","estimate","undefined","gesture","gestures","confidence","map","maxConfidence","indexOf","max","apply","name","getContext","className","ref","style","position","marginLeft","marginRight","left","right","textAlign","zindex","src","bottom","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91feaf10.chunk.js","sourcesContent":["// Points for fingers\nconst fingerJoints = {\n  thumb: [0, 1, 2, 3, 4],\n  indexFinger: [0, 5, 6, 7, 8],\n  middleFinger: [0, 9, 10, 11, 12],\n  ringFinger: [0, 13, 14, 15, 16],\n  pinky: [0, 17, 18, 19, 20],\n};\n\n /*\n    `predictions` is basically an array of objects describing each detected hand, for example:\n    [\n      {\n        handInViewConfidence: 1, // The probability of a hand being present.\n        boundingBox: { // The bounding box surrounding the hand.\n          topLeft: [162.91, -17.42],\n          bottomRight: [548.56, 368.23],\n        },\n        landmarks: [ // The 3D coordinates of each hand landmark.\n          [472.52, 298.59, 0.00],\n          [412.80, 315.64, -6.18],\n          ...\n        ],\n        annotations: { // Semantic groupings of the `landmarks` coordinates.\n          thumb: [\n            [412.80, 315.64, -6.18]\n            [350.02, 298.38, -7.14],\n            ...\n          ],\n          ...\n        }\n      }\n    ]\n  */\nexport const drawHand = (predictions, ctx) => {\n  \n  if (predictions.length > 0) {\n    predictions.forEach((prediction) => {\n\n      // Grab landmarks\n      const landmarks = prediction.landmarks;\n\n      // Loop through fingers\n      for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\n        let finger = Object.keys(fingerJoints)[j];\n\n        //  Loop through pairs of joints\n        for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\n\n          // Get pairs of joints\n          const firstJointIndex = fingerJoints[finger][k];\n          const secondJointIndex = fingerJoints[finger][k + 1];\n\n          // Draw path\n          ctx.beginPath();\n          ctx.moveTo(\n            landmarks[firstJointIndex][0],\n            landmarks[firstJointIndex][1]\n          );\n          ctx.lineTo(\n            landmarks[secondJointIndex][0],\n            landmarks[secondJointIndex][1]\n          );\n          ctx.strokeStyle = \"plum\";\n          ctx.lineWidth = 4;\n          ctx.stroke();\n        }\n      }\n\n      // Loop through landmarks and draw\n      for (let i = 0; i < landmarks.length; i++) {\n        const x = landmarks[i][0];\n        const y = landmarks[i][1];\n        \n        ctx.beginPath();\n        ctx.arc(x, y, 6, 0, 3 * Math.PI);\n\n        ctx.fillStyle = \"gold\";\n        ctx.fill();\n      }\n    });\n  }\n};\n","export default __webpack_public_path__ + \"static/media/victory.8710fbb2.png\";","export default __webpack_public_path__ + \"static/media/thumbs_up.e3bf974d.png\";","import { useRef, useState } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport './App.css';\nimport { drawHand } from \"./Utilities\";\n\nimport * as fp from \"fingerpose\";\nimport victory from \"./victory.png\";\nimport thumbs_up from \"./thumbs_up.png\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const[emoji, setEmoji] = useState(null);\n  const images = {\n    thumbs_up : thumbs_up,\n    victory : victory\n  };\n\n  const runHandPose = async () => {\n    const net = await handpose.load()\n    console.log(\"Loaded handpose\");\n\n    // Looping to detect hands \n    setInterval(() => {\n      detect(net)\n    }, 100);\n\n  }\n\n  // To detect a hand for handpose to run\n  const detect = async (net) => {\n    // Check data is available\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // Get Video Properties\n      const video = webcamRef.current.video;\n      const videoWidth = video.videoWidth;\n      const videoHeight = video.videoHeight;\n\n      // Set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // Set canvas height and width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // Make Detections\n      const hand = await net.estimateHands(video);\n      // console.log(hand);\n\n      if (hand.length > 0) {\n        const GE = new fp.GestureEstimator([\n          fp.Gestures.VictoryGesture,\n          fp.Gestures.ThumbsUpGesture,\n        ]);\n\n        const gesture = await GE.estimate(hand[0].landmarks, 8);\n        // console.log(gesture);\n\n        if (gesture.gestures !== undefined && gesture.gestures.length > 0) {\n          const confidence = gesture.gestures.map(\n            (prediction) => prediction.confidence\n          );\n          const maxConfidence = confidence.indexOf(\n            Math.max.apply(null, confidence)\n          );\n          setEmoji(gesture.gestures[maxConfidence].name);\n          console.log(emoji);\n        }\n      }\n\n      // Draw mesh\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  }\n\n  runHandPose();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlign: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        {emoji !== null ? (\n          <img\n            src={images[emoji]}\n            style={{\n              position: \"absolute\",\n              marginLeft: \"auto\",\n              marginRight: \"auto\",\n              left: 400,\n              bottom: 500,\n              right: 0,\n              textAlign: \"center\",\n              height: 100,\n            }}\n          />\n        ) : (\n          \"\"\n        )}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}